options {
  IGNORE_CASE = true;
}
PARSER_BEGIN(ExampleParser)

  public class ExampleParser {
    //Ejecución del analizador
    public static void main ( String args [ ] ) {

      //Inicialización del analizador
      ExampleParser parser;

      if(args.length == 0){
        System.out.println ("ExampleParser: Leyendo de la entrada estandar ...");
        parser = new ExampleParser(System.in);
      }
      else if(args.length == 1){
        System.out.println ("ExampleParser: Leyendo de fichero " + args[0] + " ..." );
        try {
          parser = new ExampleParser(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("ExampleParser: El fichero " + args[0] + " no ha sido encontrado.");
          return;
        }
      }
      else {
        System.out.println ("ExampleParser:  Debes utilizarlo de una de las siguientes formas:");
        System.out.println ("         java ExampleParser < fichero");
        System.out.println ("Or");
        System.out.println ("         java ExampleParser fichero");
        return ;
      }
      try {
        compilador.Start();
        System.out.println ("ExampleParser: La entrada ha sido leida con éxito.");
      }
      catch(ParseException e){
        System.out.println ("ExampleParser: Ha ocurrido un error durante el análisis.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("ExampleParser: Ha ocurrido un error.");
        System.out.println (e.getMessage());
      }
    }
  }
PARSER_END(ExampleParser)

//ESTRUCTURAS Y CARACTERES DE ESCAPE
SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"rem" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}
//TOKENS ESTÁTICOS
TOKEN : {
 <INTEGER_CONSTANT: (<DIGIT>)+>
|  <LOGIC_CONSTANT: "true" | "false" | "-1">
|  <STRING_CONSTANT: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))* "\"">
|  <#DIGIT: ["0"-"9"]>
}
//PALABRAS RESERVADAS
TOKEN : {
 <NOT: "not">
|  <IF: "if">
|  <END: "end">
|  <SUB: "sub">
|  <LET: "let">
|  <CALL: "call">
|  <THEN: "then">
|  <CASE: "case">
|  <ELSE: "else">
|  <INPUT: "input">
|  <PRINT: "print">
|  <SELECT: "select">
|  <STATIC: "static">
}
//TOKEN IDENTIFICADOR
TOKEN : {
 <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(["$"])?>
|  <#LETTER: (["a"-"z","A"-"Z"])>
}

//UNIDAD PRINCIPAL
void Start () : {}
{
  (
    < INTEGER_CONSTANT > | < STRING_CONSTANT >| <  LOGIC_CONSTANT > |
   <  NOT > |<  IF >| <  END > | <  SUB > |<  LET >| <  CALL > | < THEN > |
   <  CASE >| < ELSE > | <  INPUT > |<PRINT >| < SELECT >| < STATIC >|
    < IDENTIFIER >
  )*
  <EOF>
}